type User @model{
  id: ID!
  username: String!
  email: String!
  image: String
  posts: [Post] @connection(keyName: "byUser", fields: ["id"])
}

type Post
@model (subscriptions: {level: public})
@auth(rules:[
  {allow: owner, ownerField: "userID", provider: userPools, operations: [read, create]}
  {allow: private, provider: userPools, operations: [read]}
  {allow: private, provider: iam, operations: [create]}
])
@key(name: "byUser", fields: ["userID"])
#@key(name: "SortByTimestamp", fields: ["timestamp"], queryField: "listPostsSortedByTimestamp")
#@key(name: "BySpecificOwner", fields: ["userID", "timestamp"], queryField: "listPostsBySpecificOwner")
@searchable
{
  id: ID!
  mediaUri: String
  title: String
  description: String
  data: String
  userID: ID!
  user: User @connection(fields: ["userID"])
  #timestamp: AWSTimestamp!
}

type FollowRelationship
@model
@auth(rules: [
  {allow: owner, ownerField:"followerId", provider: userPools, operations:[read, create]}
  {allow: private, provider: userPools, operations: [read]}
  {allow: private, provider: iam, operations: [read]}
])
@key(fields: ["followeeId", "followerId"])
{
  followeeId: ID!
  followerId: ID!
  timestamp: AWSTimestamp!
}

type Timeline
@model
@auth(rules: [
  {allow: owner, ownerField: "userId", provider: userPools, operations: [read, create]},
  {allow: private, provider: iam, operations:[create]}
])
@key(fields: ["userId", "timestamp"])
{
  userId: ID!
  timestamp: AWSTimestamp!
  postId: ID!
  post: Post @connection(fields: ["postId"])
}

type Mutation{
  createPostAndTimeline(
    content: String!
  ): Post
  @function(name: "createPostAndTimeline-${env}")
  @auth(rules:[
    {allow: private, provider: userPools},
  ])
}
